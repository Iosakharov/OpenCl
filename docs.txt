SortKernels



/***
 *     ▄████████  ▄█             ▄████████  ▄██████▄  ████████▄     ▄████████
 *    ███    ███ ███            ███    ███ ███    ███ ███   ▀███   ███    ███
 *    ███    █▀  ███            ███    █▀  ███    ███ ███    ███   ███    █▀
 *    ███        ███            ███        ███    ███ ███    ███  ▄███▄▄▄
 *    ███        ███            ███        ███    ███ ███    ███ ▀▀███▀▀▀
 *    ███    █▄  ███            ███    █▄  ███    ███ ███    ███   ███    █▄
 *    ███    ███ ███▌    ▄           ███    ███ ███    ███ ███   ▄███   ███    ███
 *    ████████▀  █████▄▄██      ████████▀   ▀██████▀  ████████▀    ██████████
 *               ▀
 */

--------------------------------------------------------
	Copy (in, out)

		out = in

--------------------------------------------------------
	ParallelSelection (in, out)

		create
					i - thread
					n - size 'in'

    iData <-- in
    iKey  <-- key in

    jKey < iKey ? j = (1,2,3,4...n)
    считаем количество элементов меньше чем наш ключ
    и ставим на позицию кол-ва элементов

------------------------------------------------------
  ParrallelSelection_Blocks(in, out, aux)

    create
          i - thread
          n - size
          wg - workgroup size

    iData <-- in
    iKey  <-- key in[i]
    blockSize = wg * 1

    [1,2][3,4][5,6][7,8][9,10]
    Загружаем все блоки по очереди в внутреннюю память
    и считаем их там

------------------------------------------------------
  ParrallelSelection_Local(in, out, aux)

    create
          i <-- index in workgroup
          wg <-- workgroup size

    offset <-- group_id * wg
    in += offset;
    out += offset;

    [1,2].....[5,6],[7,8]
          ||
          \/
         [3,4]

    и сортируем то что внутри

------------------------------------------------------
